1)will finally block executes after exit, break, return.
A)finally executes in all senarios except exit which causes JVM failure/terminating the process. Also at power shutdown finally/OS failover wont executes.

2)Difference between string literal and string object(new) ?
A)A string literal is created in string-pool and new string Object is created in heap storage.
In string literal creation if the string is not present in string-pool then only the string is created at string-pool and will be 
reused for further.
In string Object(with new) string object is created in heap and when we create other with same value another will be created. Reuseage
wont be there with string Object.

Java memories :- Reff Documents&Pdf section for these concept in detailed.

	JVM memory areas / components
	- Heap area -- contains objects created in program
	- Method area and runtime constant pool   -- contains class data
	- JVM stack -- The Java stack is composed of stack frames (or frames). A stack frame contains the state of one Java method invocation. When a thread invokes a method, the Java virtual machine pushes a new frame onto that thread's Java stack. When the method completes, the virtual machine pops and discards the frame for that method
	- Native method stacks -- Native method stacks is called C stacks; it support native methods (methods written in a language other than the Java programming language), typically allocated per each thread when each thread is created
	- PC registers   -- Each of the JVM threads has its own program counter (pc) register. At any point, each of the JVM threads is executing the code of a single method, namely the current method for that thread.

In JVM there are two main types of memories are avaliable,
	1)Heap Memory
	2)Non-Heap Memory (Method area is part of non-heap memory)
	
Key Takeaways

Local Variables are stored in Frames or java stacks during runtime.
Static Variables are stored in Method Area.
Arrays are stored in heap memory.

Memory pools are created by JVM memory managers during runtime. Memory pool may belong to either heap or non-heap memory.

3) HashSet<String> set = declared;
set.add(new String("test"));
set.add(new String("test"));
will this allows duplicates ?
A) No, here the size of set is 1 only and duplicate string is not stored and its property is retained. Because the string class overrides
the equals and hashCode method of the object class.
Note :- Applicable for all primitive/wrapper classes like Integer, Decemal, .....
3.1)set.add(new App(1));
set.add(new App(1));
will this allows duplicates ?
A)Yes, because here in App unless we override equals and hashCode method set allows same values as different once by comparing their refference.

4)when to extend Exception and Throwable classes ?
A)Throwable is a class for all the bad situations, which can arise: Errors & Exceptions.

Error is something, you can't handle at all: OutOfMemoryError, VirtualMachineError, etc.

Exception is for only exceptional cases.

Note :- We should not catch Errors though we catch them there is no use program will terminate. So extending Throwable is meaning less.

There might be situations where you want to catch Throwable to not only catch Exception but also Error but it's rare, people usually don't catch Throwable. But I fail at finding a situation where you'd like to throw a subclass of Throwable.

And I also think that extending Throwable does not make things look less "exception-al", they make it look worse - which totally defeats the intention.

So to conclude, if you really want to throw something, throw a subclass of Exception.



